{
  "swagger": "2.0",
  "info": {
    "version": "1.0.1",
    "title": "JuiceMachineService"
  },
  "host": "tdm-jms.axoom.cloud",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "TDM_Auth": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://tdm-jmw.axoom.cloud/oauth/authorise",
      "tokenUrl": "https://tdm-jmw.axoom.cloud/oauth/token",
      "scopes": {
        "default": "Undefined"
      }
    }
  },
  "paths": {
    "/cmdongle/{hsmid}/update": {
      "post": {
        "security": [
          {
            "TDM_Auth": [
              "default"
            ]
          }
        ],
        "description": "requests an license update for a specific dongle",
        "parameters": [
          {
            "name": "hsmid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "the hsmid of the dongle"
          },
          {
            "name": "rac",
            "in": "body",
            "required": true,
            "description": "the latest context of the dongle",
            "schema": {
              "$ref": "#/definitions/LicenseUpdate_Request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/LicenseUpdate_Response"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/cmdongle/{hsmid}/update/confirm": {
      "post": {
        "security": [
          {
            "TDM_Auth": [
              "default"
            ]
          }
        ],
        "description": "Must be called by the client after the requested license update was successful",
        "parameters": [
          {
            "name": "hsmid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "the hsmid of the dongle"
          },
          {
            "name": "rac",
            "in": "body",
            "required": true,
            "description": "the latest context of the dongle",
            "schema": {
              "$ref": "#/definitions/LicenseUpdate_Request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/components": {
      "get": {
        "security": [
          {
            "TDM_Auth": [
              "default"
            ]
          }
        ],
        "description": "Retrieves a list of possible components (aka ingredients). The components can then be used to configure the machine and request a list of recipes.",
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Component"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/recipes": {
      "get": {
        "security": [
          {
            "TDM_Auth": [
              "default"
            ]
          }
        ],
        "description": "Retrieves a list of recipes from the server. The list is filtered by the given query parameters. Only recipes are returned, that can be produced by the specified ingredients. The order of the recipe items is totaly random.",
        "parameters": [
          {
            "name": "components",
            "in": "query",
            "description": "Array with components (aka ingredients) ids for possible ingredients. Only recipes are returned that can be produced by the given ingredients.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Recipe"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/recipes/{recipeId}": {
      "get": {
        "security": [
          {
            "TDM_Auth": [
              "default"
            ]
          }
        ],
        "description": "Retrieves the recipe data for a given recipe id",
        "parameters": [
          {
            "name": "recipeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Recipe"
            }
          },
          "404": {
            "description": "No recipe for given id found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/recipes/{recipeId}/image": {
      "get": {
        "security": [
          {
            "TDM_Auth": [
              "default"
            ]
          }
        ],
        "description": "Retrieves the image for a recipe",
        "parameters": [
          {
            "name": "recipeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          "404": {
            "description": "No recipe for given id found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/recipes/{recipeId}/program": {
      "get": {
        "security": [
          {
            "TDM_Auth": [
              "default"
            ]
          }
        ],
        "description": "Retrieves the encrypted program for a recipe. Only programs for paid invoiceses by the client are returned.",
        "parameters": [
          {
            "name": "recipeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "offerid",
            "in": "body",
            "required": true,
            "description": "the offer for the recipe that was requested and paid by the client",
            "schema": {
              "$ref": "#/definitions/RecipeContent_Request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with the encrypted program",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          "404": {
            "description": "No recipe for given id found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/offers": {
      "post": {
        "security": [
          {
            "TDM_Auth": [
              "default"
            ]
          }
        ],
        "description": "Submits a request for a new offer",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OfferRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Operation successful",
            "headers": {
              "location": {
                "description": "The path to the offer (offerId)",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Offer"
            }
          },
          "400": {
            "description": "bad request"
          }
        }
      }
    },
    "/offers/{offerId}": {
      "get": {
        "security": [
          {
            "TDM_Auth": [
              "default"
            ]
          }
        ],
        "description": "Retrieves the offer data for a given offer id",
        "parameters": [
          {
            "name": "offerId",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "okay",
            "schema": {
              "$ref": "#/definitions/Offer"
            }
          },
          "404": {
            "description": "The offer could not be found"
          },
          "500": {
            "description": "Something went wrong with the request"
          }
        }
      }
    },
    "/offers/{offerId}/request_license_update": {
      "post": {
        "security": [
          {
            "TDM_Auth": [
              "default"
            ]
          }
        ],
        "description": "Triggers a license update for the client behind the offer if the invoice was paid. This route is used in case the socket connection somehow got lost and the client did not recive the license update notification.",
        "parameters": [
          {
            "name": "offerId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OfferUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation successful"
          },
          "400": {
            "description": "bad request"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "security": [
          {
            "TDM_Auth": [
              "default"
            ]
          }
        ],
        "description": "Retrieves the user data for a given user id.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "This user is unknown"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users/{userId}/image": {
      "get": {
        "security": [
          {
            "TDM_Auth": [
              "default"
            ]
          }
        ],
        "description": "Retrieves the user image for an user. The image is returned as a base64 encoded string.",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          "404": {
            "description": "This user is unknown"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/protocols/{clientId}": {
      "post": {
        "security": [
          {
            "TDM_Auth": [
              "default"
            ]
          }
        ],
        "description": "A machine can post information on its usage",
        "parameters": [
          {
            "in": "path",
            "name": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "protocol",
            "schema": {
              "$ref": "#/definitions/Protocol"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Logging accepted"
          }
        }
      }
    }
  },
  "definitions": {
    "Protocol": {
      "type": "object",
      "properties": {
        "eventType": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "datetime"
        },
        "payload": {
          "type": "object",
          "properties": {}
        }
      }
    },
    "LicenseUpdate_Request": {
      "type": "object",
      "properties": {
        "RAC": {
          "type": "string",
          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
        }
      }
    },
    "LicenseUpdate_Response": {
      "type": "object",
      "properties": {
        "RAU": {
          "type": "string",
          "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
        },
        "isOutOfDate": {
          "type": "boolean",
          "description": "indicates if further license updates are available. The request for license updates should be reteaded untill this flag is false."
        }
      }
    },
    "OfferUpdateRequest": {
      "type": "object",
      "properties": {
        "hsmId": {
          "type": "string",
          "pattern": "[3-9]-[0-9]{7}$"
        }
      }
    },
    "OfferRequest": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "recipeId": {
                "type": "string"
              },
              "amount": {
                "type": "integer"
              }
            }
          }
        },
        "hsmId": {
          "type": "string"
        }
      }
    },
    "Offer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "invoice": {
          "$ref": "#/definitions/Invoice"
        }
      }
    },
    "RecipeContent_Request": {
      "type": "object",
      "properties": {
        "offerId": {
          "type": "string"
        }
      }
    },
    "Invoice": {
      "type": "object",
      "properties": {
        "expiration": {
          "type": "string",
          "format": "date"
        },
        "transfers": {
          "$ref": "#/definitions/Transfer"
        }
      }
    },
    "Transfer": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "coin": {
          "type": "number"
        }
      }
    },
    "Component": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "color": {
          "type": "string",
          "description": "hex"
        }
      }
    },
    "Recipe": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "licensefee": {
          "type": "integer"
        },
        "backgroundcolor": {
          "type": "string"
        },
        "authorId": {
          "type": "string"
        },
        "productCode": {
          "type": "string"
        },
        "components": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Component"
          }
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        }
      }
    }
  }
}